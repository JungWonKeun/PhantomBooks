<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="phantom.books.finalProject.searchBookPage.mapper.SearchBookPageMapper">


	<!-- 모든 책 조회 SQL 쿼리 -->

	<!-- <select id="allBook" resultType="Book"> SELECT BOOK_NO AS bookNo, BOOK_TITLE 
		AS bookTitle, BOOK_CONTENT AS bookContent, BOOK_COVER AS bookCover, BOOK_DATE 
		AS bookDate, BOOK_WRITER AS bookWriter, COMPANY_NAME AS companyName, BOOK_TALT 
		AS bookTalt, BOOK_PRICE AS bookPrice, BOOK_PAGE_COUNT AS bookPageCount, BOOK_YN 
		AS bookYn FROM BOOK </select> -->

	<!-- <select id="searchBooksByTitle" resultType="Book"> SELECT BOOK_NO AS 
		bookNo, BOOK_TITLE AS bookTitle, BOOK_CONTENT AS bookContent, BOOK_COVER 
		AS bookCover, BOOK_DATE AS bookDate, BOOK_WRITER AS bookWriter, COMPANY_NAME 
		AS companyName, BOOK_TALT AS bookTalt, BOOK_PRICE AS bookPrice, BOOK_PAGE_COUNT 
		AS bookPageCount, BOOK_YN AS bookYn FROM BOOK WHERE LOWER(BOOK_TITLE) LIKE 
		'%' || LOWER(#{title}) || '%' </select> -->




	<select id="bookDetail" resultType="Book">
		SELECT
		BOOK_NO AS bookNo,
		BOOK_TITLE AS bookTitle,
		BOOK_CONTENT AS bookContent,
		BOOK_COVER AS
		bookCover,
		BOOK_DATE AS bookDate,
		BOOK_WRITER AS bookWriter,
		COMPANY_NAME AS companyName,
		BOOK_TALT AS bookTalt,
		BOOK_PRICE AS
		bookPrice,
		BOOK_PAGE_COUNT AS bookPageCount,
		BOOK_YN AS bookYn
		FROM
		BOOK
		WHERE
		BOOK_NO = ${bookNo}
	</select>


	<!-- 선택한 책을 장바구니에 담기 -->
	<insert id="putCart" parameterType="map">
		MERGE INTO CART c

		USING (
		<foreach collection="bookNo" item="bno"
			separator=" UNION ALL ">

			SELECT #{memberNo} AS memberNo, #{bno} AS bookNo FROM dual

		</foreach>
		) src
		ON (c.MEMBER_NO = src.memberNo AND c.BOOK_NO = src.bookNo)
		WHEN
		MATCHED THEN
		UPDATE SET c.CART_COUNT = c.CART_COUNT + 1
		WHEN NOT MATCHED
		THEN
		INSERT (MEMBER_NO, BOOK_NO, CART_COUNT)
		VALUES (src.memberNo,
		src.bookNo, 1)
	</insert>

	<!-- 조회페이지에서 장바구니에 담기 -->

	<update id="putSingleCart">
		MERGE INTO CART c
		USING (
		SELECT #{memberNo,
		jdbcType=INTEGER} AS memberNo, #{bookNo,
		jdbcType=INTEGER} AS bookNo
		FROM dual
		) src
		ON (c.MEMBER_NO = src.memberNo AND c.BOOK_NO =
		src.bookNo)
		WHEN MATCHED THEN
		UPDATE SET c.CART_COUNT = c.CART_COUNT + 1
		WHEN NOT MATCHED THEN
		INSERT (MEMBER_NO, BOOK_NO, CART_COUNT)
		VALUES
		(src.memberNo, src.bookNo, 1)
	</update>

	<!-- 카테고리/옵션/쿼리 검색 -->
	<select id="searchBooks" resultType="Book">
		SELECT DISTINCT
		B.BOOK_NO AS bookNo,
		B.BOOK_TITLE AS bookTitle,
		B.BOOK_CONTENT AS bookContent,
		B.BOOK_COVER AS bookCover,
		B.BOOK_DATE AS
		bookDate,
		B.BOOK_WRITER AS bookWriter,
		B.COMPANY_NAME AS companyName,
		B.BOOK_TALT AS bookTalt,
		B.BOOK_PRICE AS bookPrice,
		B.BOOK_PAGE_COUNT AS
		bookPageCount,
		B.BOOK_YN AS bookYn
		FROM BOOK B
		LEFT JOIN BOOK_PREFERENCE
		BP ON B.BOOK_NO = BP.BOOK_NO
		LEFT JOIN PREFERENCE P ON BP.PREFERENCE_NO
		= P.PREFERENCE_NO
		LEFT JOIN BOOK_CATEGORY BC ON B.BOOK_NO = BC.BOOK_NO
		LEFT JOIN CATEGORY C ON BC.CATEGORY_NO = C.CATEGORY_NO
		WHERE 1=1
		<if test="categories != null and categories.length > 0">
			AND BC.CATEGORY_NO IN
			<foreach item="category" collection="categories" open="("
				separator="," close=")">
				#{category}
			</foreach>
		</if>
		<if test="preferences != null and preferences.length > 0">
			AND BP.PREFERENCE_NO IN
			<foreach item="preference" collection="preferences" open="("
				separator="," close=")">
				#{preference}
			</foreach>
		</if>
		<if test="searchTitle != null and searchTitle != ''">
			AND B.BOOK_TITLE LIKE '%' || #{searchTitle} || '%'
		</if>
		ORDER BY B.BOOK_NO ASC
	</select>





	<!-- 책 개수 조회 -->
	<select id="countBooks" resultType="int">
		SELECT COUNT(DISTINCT B.BOOK_NO)
		FROM BOOK B
		LEFT JOIN BOOK_PREFERENCE
		BP ON B.BOOK_NO = BP.BOOK_NO
		LEFT JOIN PREFERENCE P ON BP.PREFERENCE_NO
		= P.PREFERENCE_NO
		LEFT JOIN BOOK_CATEGORY BC ON B.BOOK_NO = BC.BOOK_NO
		LEFT JOIN CATEGORY C ON BC.CATEGORY_NO = C.CATEGORY_NO
		WHERE 1=1
		<choose>
			<when test="searchTitle != null and searchTitle != ''">
				AND LOWER(B.BOOK_TITLE) LIKE '%' ||
				LOWER(#{searchTitle}) || '%'
			</when>
		</choose>
		<choose>
			<when test="preferences != null and preferences.length > 0">
				AND BP.PREFERENCE_NO IN
				<foreach item="preference" collection="preferences" open="("
					separator="," close=")">
					#{preference}
				</foreach>
			</when>
		</choose>
		<choose>
			<when test="categories != null and categories.length > 0">
				AND BC.CATEGORY_NO IN
				<foreach item="category" collection="categories" open="("
					separator="," close=")">
					#{category}
				</foreach>
			</when>
		</choose>
	</select>


<select id="getReviewByBookNo" resultType="Review">
    SELECT
        R.BOOK_NO,
        R.MEMBER_NO,
        M.MEMBER_ID AS memberId,  <!-- 회원 아이디 추가 -->
        R.REVIEW_SCORE,
        R.REVIEW_TITLE,
        R.REVIEW_CONTENT,
        R.REVIEW_WRITE_DATE,
        R.REVIEW_UPDATE_DATE,
        R.REVIEW_IMG_NO
    FROM REVIEW R
    JOIN MEMBER M ON R.MEMBER_NO = M.MEMBER_NO
    WHERE R.BOOK_NO = #{bookNo}
</select>







</mapper>

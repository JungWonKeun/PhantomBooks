<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="phantom.books.finalProject.searchBookPage.mapper.SearchBookPageMapper">


	<!-- 모든 책 조회 SQL 쿼리 -->

	<!-- <select id="allBook" resultType="Book"> SELECT BOOK_NO AS bookNo, BOOK_TITLE 
		AS bookTitle, BOOK_CONTENT AS bookContent, BOOK_COVER AS bookCover, BOOK_DATE 
		AS bookDate, BOOK_WRITER AS bookWriter, COMPANY_NAME AS companyName, BOOK_TALT 
		AS bookTalt, BOOK_PRICE AS bookPrice, BOOK_PAGE_COUNT AS bookPageCount, BOOK_YN 
		AS bookYn FROM BOOK </select> -->

	<!-- <select id="searchBooksByTitle" resultType="Book"> SELECT BOOK_NO AS 
		bookNo, BOOK_TITLE AS bookTitle, BOOK_CONTENT AS bookContent, BOOK_COVER 
		AS bookCover, BOOK_DATE AS bookDate, BOOK_WRITER AS bookWriter, COMPANY_NAME 
		AS companyName, BOOK_TALT AS bookTalt, BOOK_PRICE AS bookPrice, BOOK_PAGE_COUNT 
		AS bookPageCount, BOOK_YN AS bookYn FROM BOOK WHERE LOWER(BOOK_TITLE) LIKE 
		'%' || LOWER(#{title}) || '%' </select> -->




	<select id="bookDetail" resultType="Book">
		SELECT
		BOOK_NO ,
		BOOK_TITLE,
		BOOK_CONTENT,
		BOOK_COVER,
		BOOK_DATE,
		BOOK_WRITER,
		COMPANY_NAME,
		BOOK_TALT,
		BOOK_PRICE,
		BOOK_PAGE_COUNT,
		BOOK_YN,
		SCORE_AVG
		FROM
		BOOK
		WHERE
		BOOK_NO =
		${bookNo}
	</select>


	<!-- 선택한 책을 장바구니에 담기 -->
	<insert id="putCart" parameterType="map">
		MERGE INTO CART c

		USING (
		<foreach collection="bookNo" item="bno"
			separator=" UNION ALL ">

			SELECT #{memberNo} AS memberNo, #{bno} AS bookNo FROM dual

		</foreach>
		) src
		ON (c.MEMBER_NO = src.memberNo AND c.BOOK_NO = src.bookNo)
		WHEN
		MATCHED THEN
		UPDATE SET c.CART_COUNT = c.CART_COUNT + 1
		WHEN NOT MATCHED
		THEN
		INSERT (MEMBER_NO, BOOK_NO, CART_COUNT)
		VALUES (src.memberNo,
		src.bookNo, 1)
	</insert>

	<!-- 조회페이지에서 장바구니에 담기 -->

	<update id="putSingleCart">
		MERGE INTO CART c
		USING (
		SELECT #{memberNo,
		jdbcType=INTEGER} AS memberNo, #{bookNo,
		jdbcType=INTEGER} AS bookNo
		FROM dual
		) src
		ON (c.MEMBER_NO = src.memberNo AND c.BOOK_NO =
		src.bookNo)
		WHEN MATCHED THEN
		UPDATE SET c.CART_COUNT = c.CART_COUNT + 1
		WHEN NOT MATCHED THEN
		INSERT (MEMBER_NO, BOOK_NO, CART_COUNT)
		VALUES
		(src.memberNo, src.bookNo, 1)
	</update>

	<!-- 상세페이지에서 장바구니 담기 -->
	<update id="detailCart">
		MERGE INTO CART c
		USING (
		SELECT #{memberNo,
		jdbcType=INTEGER} AS memberNo, #{bookNo,
		jdbcType=INTEGER} AS bookNo
		FROM dual
		) src
		ON (c.MEMBER_NO = src.memberNo AND c.BOOK_NO =
		src.bookNo)
		WHEN MATCHED THEN
		UPDATE SET c.CART_COUNT = c.CART_COUNT + 1
		WHEN NOT MATCHED THEN
		INSERT (MEMBER_NO, BOOK_NO, CART_COUNT)
		VALUES
		(src.memberNo, src.bookNo, 1)
	</update>


	<!-- 카테고리/옵션/쿼리 검색 -->

	<select id="searchBooks" resultType="Book">
		SELECT DISTINCT
		B.BOOK_NO AS bookNo,
		B.BOOK_TITLE AS bookTitle,
		B.BOOK_CONTENT AS bookContent,
		B.BOOK_COVER AS bookCover,
		B.BOOK_DATE AS
		bookDate,
		B.BOOK_WRITER AS bookWriter,
		B.COMPANY_NAME AS companyName,
		B.BOOK_TALT AS bookTalt,
		B.BOOK_PRICE AS bookPrice,
		B.BOOK_PAGE_COUNT AS
		bookPageCount,
		B.BOOK_YN AS bookYn,
		B.SCORE_AVG
		FROM BOOK B
		LEFT JOIN
		BOOK_PREFERENCE BP ON B.BOOK_NO = BP.BOOK_NO
		LEFT JOIN PREFERENCE P ON
		BP.PREFERENCE_NO = P.PREFERENCE_NO
		LEFT JOIN BOOK_CATEGORY BC ON
		B.BOOK_NO = BC.BOOK_NO
		LEFT JOIN CATEGORY C ON BC.CATEGORY_NO =
		C.CATEGORY_NO
		WHERE 1=1
		<choose>
			<when
				test="categories != null and categories.length > 0 and preferences != null and preferences.length > 0">
				AND (
				BC.CATEGORY_NO IN
				<foreach item="category" collection="categories" open="("
					separator="," close=")">
					#{category}
				</foreach>
				AND
				BP.PREFERENCE_NO IN
				<foreach item="preference" collection="preferences" open="("
					separator="," close=")">
					#{preference}
				</foreach>
				)
			</when>
			<when test="categories != null and categories.length > 0">
				AND BC.CATEGORY_NO IN
				<foreach item="category" collection="categories" open="("
					separator="," close=")">
					#{category}
				</foreach>
			</when>
			<when test="preferences != null and preferences.length > 0">
				AND BP.PREFERENCE_NO IN
				<foreach item="preference" collection="preferences" open="("
					separator="," close=")">
					#{preference}
				</foreach>
			</when>
		</choose>
		<if test="searchTitle != null and searchTitle != ''">
			AND (
			B.BOOK_TITLE LIKE '%' || #{searchTitle} || '%'
			OR
			B.BOOK_WRITER LIKE '%' || #{searchTitle} || '%'
			OR B.COMPANY_NAME LIKE
			'%' || #{searchTitle} || '%'
			)
		</if>
		<choose>
			<when test="sortOption == 'highScore'">
				ORDER BY B.SCORE_AVG DESC, B.BOOK_NO ASC
			</when>
			<when test="sortOption == 'lowScore'">
				ORDER BY B.SCORE_AVG ASC, B.BOOK_NO ASC
			</when>
			<when test="sortOption == 'manyReview'">
				ORDER BY (
				SELECT COUNT(*)
				FROM REVIEW R
				WHERE R.BOOK_NO
				= B.BOOK_NO
				) DESC, B.BOOK_NO ASC
			</when>

			<when test="sortOption == 'fewReview'">
				ORDER BY (
				SELECT COUNT(*)
				FROM REVIEW R
				WHERE R.BOOK_NO
				= B.BOOK_NO
				) ASC,
				B.BOOK_NO ASC
			</when>
			<when test="sortOption == 'highPrice'">
				ORDER BY CAST(B.BOOK_PRICE AS INT) DESC, B.BOOK_NO
				ASC
			</when>
			<when test="sortOption == 'lowPrice'">
				ORDER BY CAST(B.BOOK_PRICE AS INT) ASC, B.BOOK_NO ASC
			</when>
			<otherwise>
				ORDER BY B.BOOK_NO ASC
			</otherwise>
		</choose>
	</select>

	<!-- <select id="searchBooks" resultType="Book"> SELECT DISTINCT B.BOOK_NO 
		AS bookNo, B.BOOK_TITLE AS bookTitle, B.BOOK_CONTENT AS bookContent, B.BOOK_COVER 
		AS bookCover, B.BOOK_DATE AS bookDate, B.BOOK_WRITER AS bookWriter, B.COMPANY_NAME 
		AS companyName, B.BOOK_TALT AS bookTalt, B.BOOK_PRICE AS bookPrice, B.BOOK_PAGE_COUNT 
		AS bookPageCount, B.BOOK_YN AS bookYn FROM BOOK B LEFT JOIN BOOK_PREFERENCE 
		BP ON B.BOOK_NO = BP.BOOK_NO LEFT JOIN PREFERENCE P ON BP.PREFERENCE_NO = 
		P.PREFERENCE_NO LEFT JOIN BOOK_CATEGORY BC ON B.BOOK_NO = BC.BOOK_NO LEFT 
		JOIN CATEGORY C ON BC.CATEGORY_NO = C.CATEGORY_NO WHERE 1=1 <if test="categories 
		!= null and categories.length > 0"> AND BC.CATEGORY_NO IN <foreach item="category" 
		collection="categories" open="(" separator="," close=")"> #{category} </foreach> 
		</if> <if test="preferences != null and preferences.length > 0"> AND BP.PREFERENCE_NO 
		IN <foreach item="preference" collection="preferences" open="(" separator="," 
		close=")"> #{preference} </foreach> </if> <if test="searchTitle != null and 
		searchTitle != ''"> AND B.BOOK_TITLE LIKE '%' || #{searchTitle} || '%' </if> 
		ORDER BY B.BOOK_NO ASC </select> -->




	<!-- 책 개수 조회 -->
	<select id="countBooks" resultType="int">
		SELECT COUNT(DISTINCT B.BOOK_NO)
		FROM BOOK B
		LEFT JOIN BOOK_PREFERENCE
		BP ON B.BOOK_NO = BP.BOOK_NO
		LEFT JOIN PREFERENCE P ON BP.PREFERENCE_NO
		= P.PREFERENCE_NO
		LEFT JOIN BOOK_CATEGORY BC ON B.BOOK_NO = BC.BOOK_NO
		LEFT JOIN CATEGORY C ON BC.CATEGORY_NO = C.CATEGORY_NO
		WHERE 1=1
		<if test="searchTitle != null and searchTitle != ''">
			AND LOWER(B.BOOK_TITLE) LIKE '%' || LOWER(#{searchTitle})
			|| '%'
		</if>
		<choose>
			<when
				test="categories != null and categories.length > 0 and preferences != null and preferences.length > 0">
				AND (
				BC.CATEGORY_NO IN
				<foreach item="category" collection="categories" open="("
					separator="," close=")">
					#{category}
				</foreach>
				AND
				BP.PREFERENCE_NO IN
				<foreach item="preference" collection="preferences" open="("
					separator="," close=")">
					#{preference}
				</foreach>
				)
			</when>
			<when test="categories != null and categories.length > 0">
				AND BC.CATEGORY_NO IN
				<foreach item="category" collection="categories" open="("
					separator="," close=")">
					#{category}
				</foreach>
			</when>
			<when test="preferences != null and preferences.length > 0">
				AND BP.PREFERENCE_NO IN
				<foreach item="preference" collection="preferences" open="("
					separator="," close=")">
					#{preference}
				</foreach>
			</when>
		</choose>
	</select>



	<!-- <select id="countBooks" resultType="int"> SELECT COUNT(DISTINCT B.BOOK_NO) 
		FROM BOOK B LEFT JOIN BOOK_PREFERENCE BP ON B.BOOK_NO = BP.BOOK_NO LEFT JOIN 
		PREFERENCE P ON BP.PREFERENCE_NO = P.PREFERENCE_NO LEFT JOIN BOOK_CATEGORY 
		BC ON B.BOOK_NO = BC.BOOK_NO LEFT JOIN CATEGORY C ON BC.CATEGORY_NO = C.CATEGORY_NO 
		WHERE 1=1 <choose> <when test="searchTitle != null and searchTitle != ''"> 
		AND LOWER(B.BOOK_TITLE) LIKE '%' || LOWER(#{searchTitle}) || '%' </when> 
		</choose> <choose> <when test="preferences != null and preferences.length 
		> 0"> AND BP.PREFERENCE_NO IN <foreach item="preference" collection="preferences" 
		open="(" separator="," close=")"> #{preference} </foreach> </when> </choose> 
		<choose> <when test="categories != null and categories.length > 0"> AND BC.CATEGORY_NO 
		IN <foreach item="category" collection="categories" open="(" separator="," 
		close=")"> #{category} </foreach> </when> </choose> </select> -->

	<!-- 리뷰 갯수 조회 -->
	<select id="countReview" resultType="int">
		SELECT COUNT(*)
		FROM REVIEW
		WHERE BOOK_NO = #{bookNo}
	</select>

	<!-- 리뷰 조회 -->
	<select id="getReviewsByBookNo" resultType="Review">
		SELECT
		REVIEW.REVIEW_NO,
		REVIEW.BOOK_NO,
		REVIEW.MEMBER_NO,
		REVIEW.REVIEW_SCORE,
		REVIEW.REVIEW_TITLE,
		REVIEW.REVIEW_CONTENT,
		REVIEW.REVIEW_WRITE_DATE,
		REVIEW.REVIEW_UPDATE_DATE,
		REVIEW.REVIEW_IMG_NO,
		MEMBER.MEMBER_ID
		FROM
		REVIEW
		LEFT JOIN MEMBER ON REVIEW.MEMBER_NO = MEMBER.MEMBER_NO
		WHERE
		REVIEW.BOOK_NO = #{bookNo}
		ORDER BY REVIEW.REVIEW_WRITE_DATE DESC
	</select>

	<!-- 리뷰 작성 -->
	<insert id="insertReview" parameterType="Review">
		INSERT INTO REVIEW (
		REVIEW_NO,
		BOOK_NO,
		MEMBER_NO,
		REVIEW_SCORE,
		REVIEW_TITLE,
		REVIEW_CONTENT,
		REVIEW_WRITE_DATE,
		REVIEW_UPDATE_DATE,
		REVIEW_IMG_NO
		) VALUES (
		SEQ_REVIEW_NO.NEXTVAL,
		#{bookNo},
		#{memberNo},
		#{reviewScore},
		#{reviewTitle},
		#{reviewContent},
		SYSDATE,
		NULL,
		#{reviewImgNo}
		)
	</insert>

	<!-- 리뷰 수정 -->
	<update id="updateReview" parameterType="Review">
		UPDATE REVIEW
		SET
		REVIEW_TITLE = #{reviewTitle},
		REVIEW_CONTENT = #{reviewContent},
		REVIEW_SCORE = #{reviewScore},
		REVIEW_UPDATE_DATE = SYSDATE,
		REVIEW_IMG_NO = #{reviewImgNo}
		WHERE REVIEW_NO = #{reviewNo}
	</update>

	<!-- 리뷰 삭제 -->
	<delete id="deleteReview">
		DELETE FROM REVIEW
		WHERE REVIEW_NO = #{reviewNo}
	</delete>

	<!-- 리뷰 평점 조회 -->
	<select id="selectScoreAvg" resultType="_double">
		SELECT
		AVG(REVIEW_SCORE)
		FROM REVIEW
		WHERE BOOK_NO = #{bookNo}
	</select>

	<!-- 평균 입력 -->
	<update id="insertScoreAvg">
		UPDATE BOOK
		SET
		SCORE_AVG = #{scoreAvg}
		WHERE BOOK_NO =
		#{bookNo}
	</update>

	<!-- 평점 업데이트 -->
	<update id="updateScoreAvg">
		UPDATE "BOOK" SET
		SCORE_AVG = (
		SELECT
		ROUND(AVG(REVIEW_SCORE), 1)
		FROM REVIEW
		WHERE BOOK_NO = #{bookNo})
		WHERE
		BOOK_NO = #{bookNo}
	</update>

	<!-- 리뷰 삭제시 평점 업데이트 -->
	<update id="updateScoreAvgDelete">
		UPDATE "BOOK" SET
		SCORE_AVG = (
		SELECT
		ROUND(AVG(REVIEW_SCORE), 1)
		FROM REVIEW
		WHERE BOOK_NO =
		(SELECT
		BOOK_NO
		FROM
		REVIEW
		WHERE
		REVIEW_NO = #{reviewNo})
		)
		WHERE BOOK_NO = (
		SELECT
		BOOK_NO
		FROM
		REVIEW
		WHERE
		REVIEW_NO = #{reviewNo})
	</update>

	<!-- 리뷰 업데이트시 평점업데이트 -->
	<update id="updateScoreAvgUpdate">
		UPDATE "BOOK" SET
		SCORE_AVG = (
		SELECT
		ROUND(AVG(REVIEW_SCORE), 1)
		FROM REVIEW
		WHERE BOOK_NO =
		(SELECT
		BOOK_NO
		FROM
		REVIEW
		WHERE
		REVIEW_NO = #{reviewNo})
		)
		WHERE BOOK_NO = (
		SELECT
		BOOK_NO
		FROM
		REVIEW
		WHERE
		REVIEW_NO = #{reviewNo})
	</update>

	<!-- 내 카테고리 불러오기 -->
	<select id="myCategoryBringingIn" resultType="int">
		SELECT
		CATEGORY_NO
		FROM
		MEMBER_CATEGORY
		WHERE
		MEMBER_NO = #{memberNo}
	</select>

	<!-- 프리퍼런스 불러오기 -->
	<select id="myPreferenceBringingIn" resultType="int">
		SELECT
		PREFERENCE_NO
		FROM
		MEMBER_PREFERENCE
		WHERE
		MEMBER_NO = #{memberNo}
	</select>


	<!-- 선택 목록 장바구니로 이동 -->
	<insert id="putWishlist" parameterType="map">
		MERGE INTO WISHLIST w
		USING (
		<foreach collection="bookNo" item="bno"
			separator=" UNION ALL ">
			SELECT #{memberNo} AS memberNo, #{bno} AS bookNo FROM dual
		</foreach>
		) src
		ON (w.MEMBER_NO = src.memberNo AND w.BOOK_NO = src.bookNo)
		WHEN
		NOT MATCHED THEN
		INSERT (MEMBER_NO, BOOK_NO)
		VALUES (src.memberNo,
		src.bookNo)
	</insert>

	<insert id="putSingleWishlist">
		MERGE INTO WISHLIST w
		USING (
		SELECT #{memberNo} AS
		memberNo, #{bookNo} AS bookNo FROM dual
		) src
		ON (w.MEMBER_NO =
		src.memberNo AND w.BOOK_NO = src.bookNo)
		WHEN NOT MATCHED THEN
		INSERT
		(MEMBER_NO, BOOK_NO)
		VALUES (src.memberNo, src.bookNo)
	</insert>


	<select id="reviewCheck">
		SELECT
		(
		SELECT COUNT(*)
		FROM ORDER_LIST
		WHERE MEMBER_NO = #{memberNo}
		AND BOOK_NO = #{bookNo}
		) -
		(
		SELECT COUNT(*)
		FROM REVIEW
		WHERE BOOK_NO = #{bookNo}
		AND MEMBER_NO = #{memberNo}
		)
		FROM
		DUAL
	</select>




	<select id="buyBook">
		SELECT
		BOOK_NO,
		BOOK_TITLE,
		BOOK_COVER,
		BOOK_PRICE
		FROM
		BOOK
		WHERE
		BOOK_NO = #{bookNo}
	</select>


	<select id="reviewCp">
		SELECT
			COUNT(*)
		FROM	
			REVIEW
		WHERE 
			BOOK_NO = #{bookNo}
	
	</select>


</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="phantom.books.finalProject.admin.mapper.AdminMapper">

	<select id="countMember" resultType="_int">
		SELECT
		 COUNT(*)
		FROM "MEMBER"
		WHERE MEMBER_ID NOT LIKE 'admin%'
		AND MEMBER_ID NOT LIKE 'admin%'
	</select>
	
	<select id="countDelFl" resultType="_int">
		SELECT
		 COUNT(*)
		FROM "MEMBER"
		WHERE MEMBER_DEL_FL = 'Y'
		AND MEMBER_ID NOT LIKE 'admin%'
	</select>

	<select id="countMemberList" resultType="_int">
		SELECT
		 COUNT(*)
		FROM "MEMBER"
		WHERE MEMBER_ID NOT LIKE 'admin%'
	<choose>
			<when test="sort == 'signUp' and term == 'year'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '1' YEAR
			</when>
			<when test="term == 'weeks' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '7' DAY
			</when>
			<when test="term == 'month' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '1' MONTH
			</when>
			<when test="term == '6month' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '6' MONTH
			</when>
			<when test= "sort == 'signUp' and term =='dateSelect'">
				AND SIGNUP_DATE >= #{date}
			</when>
			<when test="sort == 'delete'">
				AND MEMBER_DEL_FL = 'Y'
			</when>
			<when test="sort == 'unlogin'">
				AND MONTHS_BETWEEN(CURRENT_DATE, LOGIN_DATE) >= 6
			</when>
	</choose>
	</select>
	
<select id="memberList" resultType="Member">
	SELECT
		MEMBER_NO,
	 	MEMBER_ID,
		MEMBER_PW,
		ZIP,
		ADDRESS,
		DETAIL_ADDRESS,
		ADD_ZIP,
		ADD_ADDRESS,
		ADD_DETAIL_ADDRESS,
		TEL_NO,
		NAME,
		RANK_NAME,
		TO_CHAR(SIGNUP_DATE,'YYYY"년" MM"월" DD"일"') SIGNUP_DATE,
		TO_CHAR(LOGIN_DATE,'YYYY"년" MM"월" DD"일"') LOGIN_DATE,
		AUTHORITY
	FROM "MEMBER"
	WHERE MEMBER_ID NOT LIKE 'admin%'
	<choose>
			<when test="sort == 'signUp' and term == 'year'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '1' YEAR
			</when>
			<when test="term == 'weeks' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '7' DAY
			</when>
			<when test="term == 'month' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '1' MONTH
			</when>
			<when test="term == '6month' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '6' MONTH
			</when>
			<when test= "sort == 'signUp' and term =='dateSelect'">
				AND SIGNUP_DATE >= #{date}
			</when>
			<when test="sort == 'delete'">
				AND MEMBER_DEL_FL = 'Y'
			</when>
			<when test="sort == 'unlogin'">
				AND MONTHS_BETWEEN(CURRENT_DATE, LOGIN_DATE) >= 6
			</when>
	</choose> 
	ORDER BY SIGNUP_DATE DESC, MEMBER_NO DESC
</select>

	<delete id="deleteMember">
		DELETE 
		FROM "MEMBER"
		WHERE MEMBER_NO = #{memberNo}
	</delete>


	<!-- 6개월 이상 로그인 안 한 회원 조회 -->
	<select id="countInactiveMember" resultType="_int">
	    SELECT
	        COUNT(*)
	    FROM "MEMBER"
	    WHERE MONTHS_BETWEEN(CURRENT_DATE, LOGIN_DATE) >= 6
	</select>

	<select id="selectAdmin">
		SELECT COUNT(*)
		FROM "MEMBER"
		WHERE MEMBER_ID LIKE 'admin%'
	</select>
	
	<insert id="insertMember"
				useGeneratedKeys="true">

		<selectKey order="BEFORE" resultType="_int"
			keyProperty="memberNo">
			SELECT SEQ_MEMBER_NO.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO "MEMBER" 
		(MEMBER_NO, MEMBER_ID, MEMBER_PW, AUTHORITY)
		VALUES(
		#{memberNo},
		'admin'||#{memberId},
		#{encPw},'2')
	</insert>
	
	<insert id="insertAdmin">
		INSERT INTO "ADMIN"
		VALUES(
		(SELECT MEMBER_NO
		 FROM "MEMBER"
		 WHERE MEMBER_ID = 'admin'||#{memberId}),
		 '수정하세요',
		 '수정하세요'
		)
	</insert>
	
	<select id="adminList">
		SELECT MEMBER_ID
		FROM "MEMBER"
		WHERE MEMBER_ID = 'admin'||#{memberId}
	</select>
	
	<update id="updateAdmin">
		UPDATE "ADMIN"
		SET
			ADMIN_NAME = #{adminName},
			ADMIN_EMAIL = #{adminEmail}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<delete id="deleteAdmin">
		DELETE 
		FROM "ADMIN"
		WHERE MEMBER_NO = #{memberNo}
	</delete>
	
	<select id="chartData" resultType="Chart">
 		SELECT 
    NVL(COUNT(SIGNUP_DATE), 0) AS COUNT_MEMBER,
    TO_CHAR(SIGNUP_DATE, 'YYYY-MM-DD') AS SIGNUP_DATE
		FROM MEMBER
		WHERE MEMBER_ID NOT LIKE 'admin%'
		<choose>
			<when test="sort == 'signUp' and term == 'year'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '1'YEAR
			</when>
			<when test="term == 'weeks' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '7'DAY
			</when>
			<when test="term == 'month' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '1'MONTH
			</when>
			<when test="term == '6month' and sort == 'signUp'">
				AND SIGNUP_DATE >= CURRENT_DATE - INTERVAL '6'MONTH
			</when>
			<when test= "sort == 'signUp' and term =='dateSelect'">
				AND SIGNUP_DATE >= #{date}
			</when>
			<when test="sort == 'delete'">
				AND MEMBER_DEL_FL = 'Y'
			</when>
			<when test="sort == 'unlogin'">
				AND MONTHS_BETWEEN(CURRENT_DATE, LOGIN_DATE) >= 6
			</when>
		</choose> 
		GROUP BY TO_CHAR(SIGNUP_DATE, 'YYYY-MM-DD')
		ORDER BY SIGNUP_DATE
	</select>
	
	<select id="memberInfo" resultType="Member">
		SELECT
		    M.MEMBER_ID,
		    M.MEMBER_DEL_FL,
		    M.RANK_NAME,
		    SUM(O.TOTAL_PRICE) AS TOTAL_PRICE
		FROM 
		    "MEMBER" M
		LEFT JOIN "ORDER" O ON M.MEMBER_NO = O.MEMBER_NO
		WHERE 
		    M.MEMBER_NO = #{memberNo}
		GROUP BY 
		    M.MEMBER_ID,
		    M.MEMBER_DEL_FL,
		    M.RANK_NAME
	</select>
	
	<update id="updateMemberRank">
		UPDATE "MEMBER"
		SET RANK_NAME = #{rankName}
		WHERE MEMBER_NO =#{memberNo}
	</update>
	
	<select id="countOrderList" resultType="_int"> 
		SELECT
			COUNT(*)
		FROM "ORDER"
		LEFT JOIN ORDER_LIST USING (ORDER_NO)
		LEFT JOIN BOOK USING (BOOK_NO)
		WHERE ORDER_NO IN (
						SELECT ORDER_NO 
						FROM "ORDER" 
						WHERE MEMBER_NO =#{memberNo}
					)
	</select>
	
	<select id="selectOrderList" resultType="OrderBookDto">
		SELECT
			ORDER_NO,
			ORDER_DATE,
			ORDER_COUNT,
			TOTAL_PRICE,
			BOOK_TITLE
		FROM "ORDER"
		LEFT JOIN ORDER_LIST USING (ORDER_NO)
		LEFT JOIN BOOK USING (BOOK_NO)
		WHERE ORDER_NO IN (
						SELECT ORDER_NO 
						FROM "ORDER" 
						WHERE MEMBER_NO =#{memberNo}
					)
	</select>
	
	<select id="countReview" resultType="_int">
		SELECT COUNT(*)
		FROM REVIEW
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<select id="selectReviewList" resultType="Review">
		SELECT
		 REVIEW_NO,
		 BOOK_TITLE,
		 REVIEW_TITLE,
		 REVIEW_CONTENT
		FROM REVIEW
		LEFT JOIN BOOK USING (BOOK_NO)
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<select id="countQuery" resultType="_int">
		SELECT
			COUNT(*)
		FROM QUERY
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<select id="selectQueryList" resultType="Query">
		SELECT 
			QUERY_NO,
			QUERY_TITLE,
			QUERY_CONTENT,
			STATUS
		FROM QUERY
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
</mapper>

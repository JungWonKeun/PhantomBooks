<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="phantom.books.finalProject.myPage.mapper.MyPageMapper">


	<!-- 로그인한 로그인한 회원의 선호 카테고리 불러오기 -->
	<select id="selectCategory" parameterType="int"
		resultType="Category">
		SELECT c.category_no, c.category_name
		FROM member_category
		mc
		JOIN category c
		ON mc.category_no = c.category_no
		WHERE mc.member_no =
		#{memberNo}
		ORDER BY c.category_No
	</select>

	<!-- 로그인한 회원의 선호 취향 불러오기 -->
	<select id="selectPreference" parameterType="int"
		resultType="Preference">
		SELECT p.preference_no, p.preference_name
		FROM
		member_preference mp
		JOIN preference p
		ON mp.preference_no =
		p.preference_no
		WHERE mp.member_no = #{memberNo}
		ORDER BY
		p.preference_No
	</select>

	<!-- 로그인한 회원의 구매 내역 불러오기 -->
	<select id="buyList" parameterType="int"
		resultType="OrderBookDto">
		SELECT
		TO_CHAR(O.ORDER_DATE, 'YYYY-MM-DD') AS ORDER_DATE,
		O.ORDER_NO,
		O.TOTAL_PRICE,
		MAX(B.BOOK_TITLE) KEEP
		(DENSE_RANK FIRST ORDER BY OL.BOOK_COUNT DESC)
		AS
		BOOK_TITLE,
		SUM(OL.BOOK_COUNT) AS BOOK_COUNT
		FROM
		ORDER_LIST OL
		JOIN
		"ORDER" O
		ON
		O.ORDER_NO = OL.ORDER_NO
		JOIN
		BOOK B
		ON OL.BOOK_NO =
		B.BOOK_NO
		WHERE
		O.MEMBER_NO = #{memberNo}
		GROUP BY
		O.ORDER_DATE,
		O.ORDER_NO,
		O.TOTAL_PRICE
		ORDER BY
		MAX(O.ORDER_DATE) DESC
	</select>

	<!-- 로그인한 회원의 리뷰 작성 내역 불러오기 -->
	<select id="writeReview" parameterType="int" resultType="Review">
		SELECT
		B.BOOK_NO, B.BOOK_TITLE, R.REVIEW_TITLE, R.REVIEW_CONTENT, R.REVIEW_SCORE
		FROM REVIEW R
		JOIN BOOK B
		ON R.BOOK_NO = B.BOOK_NO
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY
		R.REVIEW_NO DESC
	</select>

	<!-- 로그인한 회원의 찜 목록 불러오기 -->
	<select id="wishList" parameterType="int" resultType="Book">
		SELECT
		B.BOOK_TITLE, B.BOOK_CONTENT, B.BOOK_WRITER, B.BOOK_PRICE, B.BOOK_NO, B.SCORE_AVG
		FROM WISHLIST W
		JOIN
		BOOK B
		ON W.BOOK_NO = B.BOOK_NO
		WHERE MEMBER_NO = #{memberNo}
	</select>

	<!-- 로그인한 회원의 문의 내역 불러오기 -->
	<select id="queryList" parameterType="int" resultType="Query">
		SELECT QUERY_NO, QUERY_TITLE, QUERY_CONTENT, QUERY_SUBJECT, STATUS
		FROM QUERY
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY QUERY_NO DESC
		FETCH FIRST 3 ROWS ONLY
	</select>
	
	<select id="getOrderList" resultType="OrderBookDto">
	
	
	</select>

	<select id="getCategories" resultType="Category">
		SELECT
		CATEGORY_NO AS
		categoryNo,
		CATEGORY_NAME AS categoryName
		FROM "CATEGORY"
		ORDER BY
		categoryNo
	</select>

	<select id="getPreference" resultType="Preference">
		SELECT
		PREFERENCE_NO AS
		preferenceNo,
		PREFERENCE_NAME AS preferenceName
		FROM "PREFERENCE"
		ORDER
		BY preferenceNo
	</select>

	<!-- 기존 저장된 선호 카테고리 삭제 -->
	<delete id="deleteCategoryByMemberNo" parameterType="_int">
		DELETE FROM
		MEMBER_CATEGORY
		WHERE MEMBER_NO = #{memberNo}
	</delete>

	<!-- 선호 카테고리 저장 -->
	<insert id="insertCategory">
		INSERT INTO MEMBER_CATEGORY (MEMBER_NO, CATEGORY_NO)
		VALUES (#{memberNo}, #{categoryNo})
	</insert>

	<!-- 기존 저장된 선호 취향 삭제 -->
	<delete id="deletePreferenceByMemberNo" parameterType="_int">
		DELETE
		FROM MEMBER_PREFERENCE
		WHERE MEMBER_NO = #{memberNo}
	</delete>

	<!-- 선호 취향 저장 -->
	<insert id="insertPreference">
		INSERT INTO MEMBER_PREFERENCE (MEMBER_NO,
		PREFERENCE_NO) VALUES (#{memberNo}, #{preferenceNo})
	</insert>

	<!-- 선호도 조사 저장 여부 업데이트 -->
	<update id="updateCategoryYn">
		UPDATE MEMBER
		SET CATEGORY_YN = 'Y'
		WHERE MEMBER_NO =
		#{memberNo}
	</update>

	<select id="getCategoryByMemberId">
		SELECT *
		FROM "MEMBER_CATEGORY"
		WHERE MEMBER_NO =
		#{memberNo}
	</select>

	<select id="getPreferenceByMemberId">
		SELECT *
		FROM "MEMBER_PREFERENCE"
		WHERE MEMBER_NO =
		#{memberNo}
	</select>

	<select id="getEncryptedPassword">
		SELECT MEMBER_PW
		FROM MEMBER
		WHERE MEMBER_NO =
		#{memberNo}
	</select>

	<update id="changeInfo" parameterType="Member">
		UPDATE MEMBER
		SET
		ZIP =
		#{zip},
		ADDRESS = #{address},
		DETAIL_ADDRESS = #{detailAddress},
		ADD_ZIP
		= #{addZip},
		ADD_ADDRESS = #{addAddress},
		ADD_DETAIL_ADDRESS =
		#{addDetailAddress},
		TEL_NO = #{telNo},
		NAME = #{name},
		BIRTH_DATE =
		#{birthDate}
		WHERE
		MEMBER_NO = #{memberNo}
	</update>

	<select id="loginMemberByMemberNo" resultType="Member">
		SELECT
		MEMBER_NO,
		MEMBER_ID,
		MEMBER_PW,
		ZIP,
		ADDRESS,
		DETAIL_ADDRESS,
		ADD_ZIP,
		ADD_ADDRESS,
		ADD_DETAIL_ADDRESS,
		TEL_NO,
		TO_CHAR(BIRTH_DATE,
		'YYYY"년" MM"월" DD"일"')
		AS
		birthDate,
		NAME,
		RANK_NAME,
		MEMBER_DEL_FL,
		AUTHORITY,
		CATEGORY_YN
		FROM
		"MEMBER"
		WHERE MEMBER_No = #{memberNo}
	</select>

	<update id="updatePassword">
		UPDATE MEMBER
		SET MEMBER_PW = #{encryptedPw}
		WHERE
		MEMBER_NO = #{memberNo}
	</update>


</mapper>